mapping = aes(x = Experiment, y = Median, fill = as.character(color_list), group = as.character(color_list)),
position = position_dodge(width = 0.6),
size = 2,
alpha = 0.6,
pch = 21,
colour = "black") +
scale_fill_manual(values = CUD) +
theme_classic() +
theme(
legend.position ="none",
axis.text.x = element_text(angle = 35, hjust=1),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
text = element_text(family = "Helvetica", size = 12))
library(patchwork)
short_plot + tall_plot + plot_layout(widths = c(9,1))
ggsave("../Figures/Figure2.svg", plot = last_plot(), width = 8.4, height = 4.2, units = "cm", dpi = 600, scale = 3)
Repression_df <- read.csv("../Dat/Repression_df.csv")[,-1]
Repression_df2 <- Repression_df %>% drop_na()
Repression_df2 <- Repression_df2 %>% filter(grepl("\\+",Experiment))
Rep_Med_df <- Repression_df2 %>% filter(Signal == "YB_Ratio") %>% group_by(Experiment, Leaf) %>% summarize(Median = median(Value))
Normalized_df <- Repression_df2 %>% mutate(
Normalized_value = case_when(
(grepl("AT2G26780\\(A,B\\)", Experiment) & Leaf == "Set6_Leaf_A") ~ Value/58.596702,
(grepl("AT3G18480\\(r3,r6\\)", Experiment) & Leaf == "Set6_Leaf_A") ~ Value/30.643750,
(grepl("AT2G26780\\(A,B\\)", Experiment) & Leaf == "Set6_Leaf_B") ~ Value/13.238936,
(grepl("AT3G18480\\(r3,r6\\)", Experiment) & Leaf == "Set6_Leaf_B") ~ Value/20.584861,
(grepl("AT2G26780\\(A,B\\)", Experiment) & Leaf == "Set6_Leaf_C") ~ Value/66.557331,
(grepl("AT3G18480\\(r3,r6\\)", Experiment) & Leaf == "Set6_Leaf_C") ~ Value/41.414286,
(grepl("AT1G64550\\(E,A\\)", Experiment) & Leaf == "Set6_Leaf_D") ~ Value/68.995100,
(grepl("AT3G08530\\(r7,r5\\)", Experiment) & Leaf == "Set6_Leaf_D") ~ Value/49.456522,
(grepl("AT1G64550\\(E,A\\)", Experiment) & Leaf == "Set6_Leaf_E") ~ Value/163.556056,
(grepl("AT3G08530\\(r7,r5\\)", Experiment) & Leaf == "Set6_Leaf_E") ~ Value/54.271341,
(grepl("AT1G64550\\(E,A\\)", Experiment) & Leaf == "Set6_Leaf_F") ~ Value/41.419516,
(grepl("AT3G08530\\(r7,r5\\)", Experiment) & Leaf == "Set6_Leaf_F") ~ Value/38.087719,
(grepl("AT5G37830\\(B,E\\)", Experiment) & Leaf == "Set6_Leaf_G") ~ Value/21.140200,
(grepl("AT5G37830\\(B,E\\)", Experiment) & Leaf == "Set6_Leaf_H") ~ Value/38.633740,
(grepl("AT5G37830\\(B,E\\)", Experiment) & Leaf == "Set6_Leaf_I") ~ Value/16.650722,
(grepl("AT2G26780\\(A,B\\)", Experiment) & Leaf == "Set8_Leaf_A") ~ Value/67.858011,
(grepl("AT3G18480\\(r3,r6\\)", Experiment) & Leaf == "Set8_Leaf_A") ~ Value/49.691434,
(grepl("AT2G26780\\(A,B\\)", Experiment) & Leaf == "Set8_Leaf_B") ~ Value/58.791667,
(grepl("AT3G18480\\(r3,r6\\)", Experiment) & Leaf == "Set8_Leaf_B") ~ Value/54.015686,
(grepl("AT2G26780\\(A,B\\)", Experiment) & Leaf == "Set8_Leaf_C") ~ Value/106.628920,
(grepl("AT3G18480\\(r3,r6\\)", Experiment) & Leaf == "Set8_Leaf_C") ~ Value/45.587400,
(grepl("AT2G26780\\(A,B\\)", Experiment) & Leaf == "Set8_Leaf_D") ~ Value/30.340850,
(grepl("AT3G18480\\(r3,r6\\)", Experiment) & Leaf == "Set8_Leaf_D") ~ Value/31.091094,
(grepl("AT1G64550\\(E,A\\)", Experiment) & Leaf == "Set8_Leaf_E") ~ Value/342.105263,
(grepl("AT2G29080\\(D,C\\)", Experiment) & Leaf == "Set8_Leaf_E") ~ Value/52.320120,
(grepl("AT1G64550\\(E,A\\)", Experiment) & Leaf == "Set8_Leaf_F") ~ Value/168.410524,
(grepl("AT2G29080\\(D,C\\)", Experiment) & Leaf == "Set8_Leaf_F") ~ Value/36.516471,
(grepl("AT1G64550\\(E,A\\)", Experiment) & Leaf == "Set8_Leaf_G") ~ Value/122.716180,
(grepl("AT2G29080\\(D,C\\)", Experiment) & Leaf == "Set8_Leaf_G") ~ Value/23.490000,
(grepl("AT1G64550\\(E,A\\)", Experiment) & Leaf == "Set8_Leaf_H") ~ Value/167.580065,
(grepl("AT2G29080\\(D,C\\)", Experiment) & Leaf == "Set8_Leaf_H") ~ Value/26.716215,
(grepl("AT3G08530\\(r7,r5\\)", Experiment) & Leaf == "Set8_Leaf_I") ~ Value/42.930556,
(grepl("AT3G08530\\(r7,r5\\)", Experiment) & Leaf == "Set8_Leaf_J") ~ Value/41.745000,
(grepl("AT3G08530\\(r7,r5\\)", Experiment) & Leaf == "Set8_Leaf_K") ~ Value/48.209524,
(grepl("AT3G08530\\(r7,r5\\)", Experiment) & Leaf == "Set8_Leaf_L") ~ Value/47.921997,
))
Repression <- Normalized_df %>% filter(Signal == "YB_Ratio") %>% drop_na()
Repression2 <- transform(Repression,
Experiment=plyr::revalue(Experiment,
c("AT3G18480(r3,r6)+gRNA_r5" = "AT3G18480(r3,r6)+Input0,0",
"AT3G18480(r3,r6)+gRNA_r3+gRNA_r5" = "AT3G18480(r3,r6)+Input1,0",
"AT3G08530(r7,r5)+gRNA_B+gRNA_E" = "AT3G08530(r7,r5)+Input0,0",
"AT3G08530(r7,r5)+gRNA_r7+gRNA_E" = "AT3G08530(r7,r5)+Input1,0",
"AT3G18480(r3,r6)+gRNA_r6+gRNA_r5" = "AT3G18480(r3,r6)+Input0,1",
"AT3G08530(r7,r5)+gRNA_r5+gRNA_E" = "AT3G08530(r7,r5)+Input0,1",
"AT3G18480(r3,r6)+gRNA_r3+gRNA_r6" = "AT3G18480(r3,r6)+Input1,1",
"AT3G08530(r7,r5)+gRNA_r7+gRNA_5" = "AT3G08530(r7,r5)+Input1,1",
"AT2G26780(A,B)+gRNA_r3" = "AT2G26780(A,B)+Input0,0",
"AT1G64550(E,A)+gRNA_r6" = "AT1G64550(E,A)+Input0,0",
"AT2G26780(A,B)+gRNA_B" = "AT2G26780(A,B)+Input0,1",
"AT1G64550(E,A)+gRNA_E" = "AT1G64550(E,A)+Input1,0",
"AT5G37830(B,E)+gRNA_r3" = "AT5G37830(B,E)+Input0,0",
"AT5G37830(B,E)+gRNA_B+gRNA_r7" = "AT5G37830(B,E)+Input1,0",
"AT5G37830(B,E)+gRNA_E+gRNA_r7" = "AT5G37830(B,E)+Input0,1",
"AT5G37830(B,E)+gRNA_B+gRNA_E" = "AT5G37830(B,E)+Input1,1",
"AT2G26780(A,B)+C+D" = "AT2G26780(A,B)+Input0,0",
"AT3G18480(r3,r6)+r7+r5" = "AT3G18480(r3,r6)+Input0,0",
"AT2G26780(A,B)+A+D" = "AT2G26780(A,B)+Input1,0",
"AT3G18480(r3,r6)+r3+r5" = "AT3G18480(r3,r6)+Input1,0",
"AT2G26780(A,B)+C+B" = "AT2G26780(A,B)+Input0,1",
"AT3G18480(r3,r6)+r7+r6" = "AT3G18480(r3,r6)+Input0,1",
"AT2G26780(A,B)+A+B" = "AT2G26780(A,B)+Input1,1",
"AT3G18480(r3,r6)+r3+r6" = "AT3G18480(r3,r6)+Input1,1",
"AT2G29080(D,C)+A+B" = "AT2G29080(D,C)+Input0,0",
"AT1G64550(E,A)+B+C" = "AT1G64550(E,A)+Input0,0",
"AT2G29080(D,C)+D+B" = "AT2G29080(D,C)+Input1,0",
"AT1G64550(E,A)+E+C" = "AT1G64550(E,A)+Input1,0",
"AT2G29080(D,C)+A+C" = "AT2G29080(D,C)+Input0,1",
"AT1G64550(E,A)+B+A" = "AT1G64550(E,A)+Input0,1",
"AT2G29080(D,C)+D+C" = "AT2G29080(D,C)+Input1,1",
"AT1G64550(E,A)+E+A" = "AT1G64550(E,A)+Input1,1",
"AT3G08530(r7,r5)+r3+r6" = "AT3G08530(r7,r5)+Input0,0",
"AT3G08530(r7,r5)+r3+r5" = "AT3G08530(r7,r5)+Input0,1",
"AT3G08530(r7,r5)+r7+r5" = "AT3G08530(r7,r5)+Input1,1",
"AT3G08530(r7,r5)+r7+r6" = "AT3G08530(r7,r5)+Input1,0"
)))
#Label Experiment as Sets
Repression3 <- Repression2 %>% mutate(
Set = case_when(
grepl("AT1G64550\\(E,A\\)", Experiment) ~ "AT1G64550",
grepl("AT2G26780\\(A,B\\)", Experiment) ~ "AT2G26780",
grepl("AT2G29080\\(D,C\\)", Experiment) ~ "AT2G29080",
grepl("AT3G08530\\(r7,r5\\)", Experiment) ~ "AT3G08530",
grepl("AT3G18480\\(r3,r6\\)", Experiment) ~ "AT3G18480",
grepl("AT5G37830\\(B,E\\)", Experiment) ~ "AT5G37830"
)
)
#Keep experiments all on same leaf
Set1 <- Repression3 %>% filter(Experiment == "AT1G64550(E,A)+Input1,1")
Set2 <- Repression3 %>% filter(Experiment == "AT2G26780(A,B)+Input1,1")
Repression4 <- Repression3 %>% filter(
(Set == "AT1G64550" & Leaf %in% unique(Set1$Leaf)) |
(Set == "AT2G26780" & Leaf %in% unique(Set2$Leaf)) |
(Set == "AT2G29080") |
(Set == "AT3G08530") |
(Set == "AT3G18480") |
(Set == "AT5G37830")
)
library(multcompView)
CLD<-function(Dataset, Exp){
Stat1 <- Dataset %>% filter(Set == Exp)
Stat1_aov <- aov(Normalized_value ~ Experiment*Leaf, data = Stat1)
print(summary(Stat1_aov))
Stat1_tukey <- TukeyHSD(Stat1_aov)
Stat1_cld <- multcompLetters4(Stat1_aov, Stat1_tukey)
print(Stat1_cld)
Stat1_cld2 <- as.data.frame.list(Stat1_cld$Experiment) %>% select(Letters)
return(Stat1_cld2)
}
Set1_CLD <- CLD(Repression4, "AT1G64550")
Set2_CLD <- CLD(Repression4, "AT2G26780")
Set3_CLD <- CLD(Repression4, "AT2G29080")
Set4_CLD <- CLD(Repression4, "AT3G08530")
Set5_CLD <- CLD(Repression4, "AT3G18480")
Set6_CLD <- CLD(Repression4, "AT5G37830")
CLD_Letters <- rbind(Set1_CLD, Set2_CLD, Set3_CLD, Set4_CLD, Set5_CLD, Set6_CLD)
CLD_Letters <- CLD_Letters %>% add_rownames(var = "Experiment")
CLD_ypos <- Repression4 %>% group_by(Experiment) %>%
mutate(IQR = IQR(Normalized_value),
O_upper = quantile(Normalized_value, probs=c(0.75)) + 1.5*IQR,
O_lower = quantile(Normalized_value, probs=c(0.25)) - 1.5*IQR) %>%
summarize(O_upper = max(O_upper))
CLD_Final <- left_join(CLD_Letters, CLD_ypos, by = "Experiment")
Repression5 <- Repression4
#Extract Median from each group:
Rep_Med_df <- Repression5 %>% group_by(Experiment, Leaf) %>% summarize(Median = median(Normalized_value))
#Load in Fonts
font_add("Helvetica", "C:/Users/ericy/AppData/Local/Microsoft/Windows/Fonts/Helvetica.ttf")
showtext_auto()
showtext_opts(dip = 600)
#Define custom Pallette from CUD Colour blind Pallette:
CUD = c("#E69F00", "#56B4E9","#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot() +
geom_quasirandom( #beeswarm plot
data = Repression5,
mapping = aes(x = Experiment, y = Normalized_value, fill = Leaf),
size = 1,
dodge.width = 0.6,
alpha = 0.7,
pch = 21,
colour = "NA") +
geom_point( #Median of leaf
data = Rep_Med_df,
mapping = aes(x = Experiment, y = Median, fill = Leaf),
position = position_dodge(width = 0.6),
size = 3,
alpha = 0.6,
pch = 21,
colour = "black") +
geom_boxplot( #Median of Experiment
data = Repression5,
mapping = aes(x = Experiment, y = Normalized_value),
alpha = 0.3,
outlier.shape = NA,
lwd = 0.7,
fatten = 2
) +
geom_text(
data = CLD_Final,
aes(x = Experiment, y = O_upper, label = Letters),
vjust = - 2
) +
#scale_color_manual(values = CUD) +
theme_classic() +
theme(
legend.position ="none",
axis.text.x = element_text(angle = 90, hjust=1),
axis.title.x = element_blank(),
text = element_text(family = "Helvetica", size = 12)) +
scale_y_continuous(breaks = seq(0,3, by = 0.2))+
ylab("Fold Change from Unrepressed Control")
ggsave("../Figures/Figure5D.svg", plot = last_plot(), width = 8.4, height = 6, units = "cm", dpi = 600, scale = 3)
#This following line bypasses the normalization as fold change
Normalized_df <- Repression_df2 %>% rename(Normalized_value = Value) #For supplement plotting
Repression <- Normalized_df %>% filter(Signal == "YB_Ratio") %>% drop_na()
Repression2 <- transform(Repression,
Experiment=plyr::revalue(Experiment,
c("AT3G18480(r3,r6)+gRNA_r5" = "AT3G18480(r3,r6)+Input0,0",
"AT3G18480(r3,r6)+gRNA_r3+gRNA_r5" = "AT3G18480(r3,r6)+Input1,0",
"AT3G08530(r7,r5)+gRNA_B+gRNA_E" = "AT3G08530(r7,r5)+Input0,0",
"AT3G08530(r7,r5)+gRNA_r7+gRNA_E" = "AT3G08530(r7,r5)+Input1,0",
"AT3G18480(r3,r6)+gRNA_r6+gRNA_r5" = "AT3G18480(r3,r6)+Input0,1",
"AT3G08530(r7,r5)+gRNA_r5+gRNA_E" = "AT3G08530(r7,r5)+Input0,1",
"AT3G18480(r3,r6)+gRNA_r3+gRNA_r6" = "AT3G18480(r3,r6)+Input1,1",
"AT3G08530(r7,r5)+gRNA_r7+gRNA_5" = "AT3G08530(r7,r5)+Input1,1",
"AT2G26780(A,B)+gRNA_r3" = "AT2G26780(A,B)+Input0,0",
"AT1G64550(E,A)+gRNA_r6" = "AT1G64550(E,A)+Input0,0",
"AT2G26780(A,B)+gRNA_B" = "AT2G26780(A,B)+Input0,1",
"AT1G64550(E,A)+gRNA_E" = "AT1G64550(E,A)+Input1,0",
"AT5G37830(B,E)+gRNA_r3" = "AT5G37830(B,E)+Input0,0",
"AT5G37830(B,E)+gRNA_B+gRNA_r7" = "AT5G37830(B,E)+Input1,0",
"AT5G37830(B,E)+gRNA_E+gRNA_r7" = "AT5G37830(B,E)+Input0,1",
"AT5G37830(B,E)+gRNA_B+gRNA_E" = "AT5G37830(B,E)+Input1,1",
"AT2G26780(A,B)+C+D" = "AT2G26780(A,B)+Input0,0",
"AT3G18480(r3,r6)+r7+r5" = "AT3G18480(r3,r6)+Input0,0",
"AT2G26780(A,B)+A+D" = "AT2G26780(A,B)+Input1,0",
"AT3G18480(r3,r6)+r3+r5" = "AT3G18480(r3,r6)+Input1,0",
"AT2G26780(A,B)+C+B" = "AT2G26780(A,B)+Input0,1",
"AT3G18480(r3,r6)+r7+r6" = "AT3G18480(r3,r6)+Input0,1",
"AT2G26780(A,B)+A+B" = "AT2G26780(A,B)+Input1,1",
"AT3G18480(r3,r6)+r3+r6" = "AT3G18480(r3,r6)+Input1,1",
"AT2G29080(D,C)+A+B" = "AT2G29080(D,C)+Input0,0",
"AT1G64550(E,A)+B+C" = "AT1G64550(E,A)+Input0,0",
"AT2G29080(D,C)+D+B" = "AT2G29080(D,C)+Input1,0",
"AT1G64550(E,A)+E+C" = "AT1G64550(E,A)+Input1,0",
"AT2G29080(D,C)+A+C" = "AT2G29080(D,C)+Input0,1",
"AT1G64550(E,A)+B+A" = "AT1G64550(E,A)+Input0,1",
"AT2G29080(D,C)+D+C" = "AT2G29080(D,C)+Input1,1",
"AT1G64550(E,A)+E+A" = "AT1G64550(E,A)+Input1,1",
"AT3G08530(r7,r5)+r3+r6" = "AT3G08530(r7,r5)+Input0,0",
"AT3G08530(r7,r5)+r3+r5" = "AT3G08530(r7,r5)+Input0,1",
"AT3G08530(r7,r5)+r7+r5" = "AT3G08530(r7,r5)+Input1,1",
"AT3G08530(r7,r5)+r7+r6" = "AT3G08530(r7,r5)+Input1,0"
)))
#Label Experiment as Sets
Repression3 <- Repression2 %>% mutate(
Set = case_when(
grepl("AT1G64550\\(E,A\\)", Experiment) ~ "AT1G64550",
grepl("AT2G26780\\(A,B\\)", Experiment) ~ "AT2G26780",
grepl("AT2G29080\\(D,C\\)", Experiment) ~ "AT2G29080",
grepl("AT3G08530\\(r7,r5\\)", Experiment) ~ "AT3G08530",
grepl("AT3G18480\\(r3,r6\\)", Experiment) ~ "AT3G18480",
grepl("AT5G37830\\(B,E\\)", Experiment) ~ "AT5G37830"
)
)
#Keep experiments all on same leaf
Set1 <- Repression3 %>% filter(Experiment == "AT1G64550(E,A)+Input1,1")
Set2 <- Repression3 %>% filter(Experiment == "AT2G26780(A,B)+Input1,1")
Repression4 <- Repression3 %>% filter(
(Set == "AT1G64550" & Leaf %in% unique(Set1$Leaf)) |
(Set == "AT2G26780" & Leaf %in% unique(Set2$Leaf)) |
(Set == "AT2G29080") |
(Set == "AT3G08530") |
(Set == "AT3G18480") |
(Set == "AT5G37830")
)
library(multcompView)
CLD<-function(Dataset, Exp){
Stat1 <- Dataset %>% filter(Set == Exp)
Stat1_aov <- aov(Normalized_value ~ Experiment*Leaf, data = Stat1)
print(summary(Stat1_aov))
Stat1_tukey <- TukeyHSD(Stat1_aov)
Stat1_cld <- multcompLetters4(Stat1_aov, Stat1_tukey)
print(Stat1_cld)
Stat1_cld2 <- as.data.frame.list(Stat1_cld$Experiment) %>% select(Letters)
return(Stat1_cld2)
}
Set1_CLD <- CLD(Repression4, "AT1G64550")
Set2_CLD <- CLD(Repression4, "AT2G26780")
Set3_CLD <- CLD(Repression4, "AT2G29080")
Set4_CLD <- CLD(Repression4, "AT3G08530")
Set5_CLD <- CLD(Repression4, "AT3G18480")
Set6_CLD <- CLD(Repression4, "AT5G37830")
CLD_Letters <- rbind(Set1_CLD, Set2_CLD, Set3_CLD, Set4_CLD, Set5_CLD, Set6_CLD)
CLD_Letters <- CLD_Letters %>% add_rownames(var = "Experiment")
CLD_ypos <- Repression4 %>% group_by(Experiment) %>%
mutate(IQR = IQR(Normalized_value),
O_upper = quantile(Normalized_value, probs=c(0.75)) + 1.5*IQR,
O_lower = quantile(Normalized_value, probs=c(0.25)) - 1.5*IQR) %>%
summarize(O_upper = max(O_upper))
CLD_Final <- left_join(CLD_Letters, CLD_ypos, by = "Experiment")
Repression5 <- Repression4
#Extract Median from each group:
Rep_Med_df <- Repression5 %>% group_by(Experiment, Leaf) %>% summarize(Median = median(Normalized_value))
#Load in Fonts
font_add("Helvetica", "C:/Users/ericy/AppData/Local/Microsoft/Windows/Fonts/Helvetica.ttf")
showtext_auto()
showtext_opts(dip = 600)
CUD = c("#E69F00", "#56B4E9","#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
Rep_plot <- function(cur_set, vadjust, firstplot){
plot <- ggplot() +
geom_quasirandom( #beeswarm plot
data = Repression5 %>% filter(grepl(cur_set, Experiment)),
mapping = aes(x = Experiment, y = Normalized_value, fill = Leaf),
size = 1,
dodge.width = 0.6,
alpha = 0.7,
pch = 21,
colour = "NA") +
geom_point( #Median of leaf
data = Rep_Med_df %>% filter(grepl(cur_set, Experiment)),
mapping = aes(x = Experiment, y = Median, fill = Leaf),
position = position_dodge(width = 0.6),
size = 3,
alpha = 0.6,
pch = 21,
colour = "black") +
geom_boxplot( #Median of Experiment
data = Repression5 %>% filter(grepl(cur_set, Experiment)),
mapping = aes(x = Experiment, y = Normalized_value),
alpha = 0.3,
outlier.shape = NA,
lwd = 0.7,
fatten = 2
) +
geom_text(
data = CLD_Final %>% filter(grepl(cur_set, Experiment)),
aes(x = Experiment, y = O_upper, label = Letters),
vjust = vadjust
) +
scale_fill_manual(values = CUD) +
theme_classic()
if (firstplot == TRUE){
plot <- plot +
theme(
legend.position ="none",
axis.text.x = element_text(angle = 90, hjust=1),
axis.title.x = element_blank(),
text = element_text(family = "Helvetica", size = 12)) +
ylab("Normalized Fluorescence")
} else {
plot <- plot +
theme(
legend.position ="none",
axis.text.x = element_text(angle = 90, hjust=1),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
text = element_text(family = "Helvetica", size = 12))
}
return(plot)
}
Rep_plot(cur_set = unique(Repression5$Set)[1], vadjust = -1, firstplot = TRUE) +
Rep_plot(cur_set = unique(Repression5$Set)[2], vadjust = -2, firstplot = FALSE) +
Rep_plot(cur_set = unique(Repression5$Set)[3], vadjust = -2, firstplot = FALSE) +
Rep_plot(cur_set = unique(Repression5$Set)[4], vadjust = -2, firstplot = FALSE) +
Rep_plot(cur_set = unique(Repression5$Set)[5], vadjust = 2, firstplot = FALSE) +
Rep_plot(cur_set = unique(Repression5$Set)[6], vadjust = -2, firstplot = FALSE) +
plot_layout(ncol = 6)
ggsave("../Figures/SupplementalFigure4.svg", plot = last_plot(), width = 8.4, height = 6, units = "cm", dpi = 600, scale = 3)
Tissue <- read.csv("../Data/MoR_Stats_Tissue.csv")[,-1]
Final_list <- read.csv("../Data/Final_Candidates.csv")
library(ggplot2)
library(gghighlight)
library(ggrepel)
library(scales)
library(svglite)
library(showtext)
cutoff <- 0.03
#Label UBQ1, UBQ10, Act2, RBCS2B, LHB1B1, cab2
Tissue$Symbol <- NA
Tissue$Symbol[which(Tissue$AGI == "AT3G52590")] <- "UBQ1"
Tissue$Symbol[which(Tissue$AGI == "AT4G05320")] <- "UBQ10"
Tissue$Symbol[which(Tissue$AGI == "AT3G18780")] <- "Act2"
Tissue$Symbol[which(Tissue$AGI == "AT5G38420")] <- "RbcS2B"
#Tissue$Symbol[which(Tissue$AGI == "AT2G34430")] <- "LHB1B1"
#Tissue$Symbol[which(Tissue$AGI == "AT1G29920")] <- "Cab2"
font_add("Helvetica", "C:/Users/ericy/AppData/Local/Microsoft/Windows/Fonts/Helvetica.ttf")
showtext_auto()
showtext_opts(dip = 600)
Annotated_Tissue <- subset(Tissue, !is.na(Symbol))
#For cutoff 0.03 (No core type info)
ggplot(data = Tissue, mapping = aes(x = geom_mean, y = CV)) +
geom_point(size = 2, alpha = 0.3, color = "#DDCC77") +
scale_shape_manual(values = c(21,22,23,24,25,20)) +
theme_classic() +
scale_x_log10(labels = trans_format("log10", math_format(10^.x)))+
annotation_logticks(base=10, sides = "bl") +
scale_y_log10(breaks = c(0.1,round(quantile(Tissue$CV, cutoff), digits = 2), 0.3,1,3.0), labels = c("0.1", round(quantile(Tissue$CV, cutoff), digits = 2), "0.3","1","3.0")) +
xlab(label = bquote(Geometric~Mean~(log[10]))) +
ylab(label = bquote(Coefficient~of~Variation~(log[10]))) +
guides(alpha = F) +
labs(color = "Core Type", shape = "Core Type", fill = "Core Type") +
gghighlight(CV <= quantile(Tissue$CV, cutoff))+
geom_hline(yintercept=quantile(Tissue$CV, cutoff), linetype='dotted', col = 'red')+
geom_point(data = Annotated_Tissue, mapping = aes(x = geom_mean, y = CV), size =4, alpha = 0.6, color = "black") +
geom_text_repel(data = Annotated_Tissue, mapping = aes(label = Symbol),
box.padding = 1,
show.legend = FALSE,
size = 8) + #this removes the 'a' from the legend
theme(axis.text.y = element_text(color = c("black", "red", "black", "black", "black"),
size = 20),
axis.title.x = element_text(size = 25),
axis.title.y = element_text(size = 25),
axis.text.x = element_text(size = 20),
axis.ticks.y = element_line(
color = c("black", "red", "black", "black", "black"),
size = c(0.5, 1, 0.5, 0.5, 0.5)),
text = element_text(family = "Helvetica")) +
geom_point(data = Final_list, mapping = aes(x = geom_mean, y = CV), size = 3, alpha = 1, color = "#CC6677") +
coord_cartesian(expand = TRUE, xlim = c(10, 1e5), ylim = c(0.1, 8))
ggsave("../Figures/Figure1D.svg", plot = last_plot(), width = 8.4, height = 6, units = "cm", dpi = 600, scale = 3)
TopCandidate <- Final_list %>% select(AGI, CV, geom_mean)
Tobacco_Sig <- read.csv("../Data/Tobacco_Significance.csv")[,-1]
TopCandidate <- TopCandidate %>% left_join(Tobacco_Sig, by = c("AGI" = "Experiment")) %>% mutate(Sig = replace_na(Sig, "NA")) %>% mutate(Sig = str_replace(Sig, "^$", "Sig")) %>%
mutate(RUBY = case_when(
AGI == "AT1G54080" ~ "R",
AGI == "AT5G37830" ~ "R",
AGI == "AT3G08530" ~ "R",
AGI == "AT2G29080" ~ "R",
AGI == "AT1G64990" ~ "G",
AGI == "AT1G71860" ~ "G",
AGI == "AT1G54390" ~ "G",
AGI == "AT2G26780" ~ "G",
AGI == "AT1G18700" ~ "G",
AGI == "AT2G33730" ~ "G",
AGI == "AT5G06140" ~ "G",
AGI == "AT1G64550" ~ "G",
TRUE ~ "NA"
))
font_add("Helvetica", "C:/Users/ericy/AppData/Local/Microsoft/Windows/Fonts/Helvetica.ttf")
showtext_auto()
showtext_opts(dip = 600)
ggplot(data = TopCandidate, mapping = aes(x = geom_mean, y = CV)) +
geom_point(shape = 21, size = 5, alpha = 0.6, stroke = 2, aes(fill = Sig, color = RUBY)) +
scale_fill_manual(values = c("NA" = "grey", "ns" = "black", "Sig" = "#FFB000"), labels = c("Didn't Clone", "Not Sig", "Sig")) +
scale_color_manual(values = c("NA" = "grey", "G" = "black", "R" = "#DC267F"), labels = c("Didn't Test", "No RUBY", "RUBY")) +
labs(fill = "N. benthamiana", color = "Arabidopsis")+
theme_classic() +
scale_x_continuous(trans='log2', limits = c(256, 8192), breaks=scales::trans_breaks("log2", function(x) 2^x)) +
scale_y_continuous(breaks=seq(0.12, 0.26, 0.02), limits = c(0.12,0.26)) +
xlab(label = bquote(Geometric~Mean~(log[2]))) +
ylab(label = "Coefficient of Variation") +
theme(
text = element_text(family = "Helvetica", size = 12),
axis.title.x = element_text(size = 23),
axis.title.y = element_text(size = 23),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18)
) +
geom_text_repel(mapping = aes(label = AGI), size = 4)
ggsave("../Figures/SupplementalFigure2.svg", plot = last_plot(), width = 9, height = 6, units = "cm", dpi = 600, scale = 3)
View(TopCandidate)
library(tidyverse)
library(ggplot2)
library(showtext)
font_add("Helvetica", "C:/Users/ericy/AppData/Local/Microsoft/Windows/Fonts/Helvetica.ttf")
df <- read.csv("../Dat/Ct.csv")
ggplot(SEM, aes(x = Sample, y = Mean))+
geom_point(size = 2)+
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE), width = 0.5, size = 1) +
theme_classic() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "none",
text = element_text(family = "Helvetica", size = 12)) +
ylab("Normalized RUBY expression")
library(tidyverse)
library(ggplot2)
library(showtext)
font_add("Helvetica", "C:/Users/ericy/AppData/Local/Microsoft/Windows/Fonts/Helvetica.ttf")
df <- read.csv("../Dat/Ct.csv")
library(tidyverse)
library(ggplot2)
library(showtext)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
font_add("Helvetica", "C:/Users/ericy/AppData/Local/Microsoft/Windows/Fonts/Helvetica.ttf")
df <- read.csv("../Dat/Ct.csv")
df2 <- df %>% mutate(
Linear = Amp ^ (-Ct)
) %>% pivot_wider(names_from = Target, values_from = c(Ct, Amp, Linear)) %>% mutate(Ratio = Linear_RUBY/Linear_PP2AA3) %>% select(Sample, Ratio)
SEM <- df2 %>% group_by(Sample) %>% summarise(SE = sd(Ratio)/sqrt(n()), Mean = mean(Ratio)) %>% mutate(Group = c("1","1","2","2","3","3","4","4","5"))
SEM$Sample <- factor(SEM$Sample, levels = c("Col-0", "AT1G54080-2", "AT1G54080-3", "AT5G37830-10", "AT5G37830-14",  "AT1G64550-1", "AT1G64550-2", "AT2G29080-3", "AT2G29080-4"))
showtext_auto()
showtext_opts(dip = 600)
ggplot(SEM, aes(x = Sample, y = Mean))+
geom_point(size = 2)+
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE), width = 0.5, size = 1) +
theme_classic() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "none",
text = element_text(family = "Helvetica", size = 12)) +
ylab("Normalized RUBY expression")
#scale_color_manual(values = c("#E69F00", "#009E73", "#56B4E9", "#CC79A7", "#000000"))
ggsave("../Figures/Figure3B.svg", width = 4.875, height = 10.75, units = "cm")
library(tidyverse)
library(ggplot2)
library(showtext)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
font_add("Helvetica", "C:/Users/ericy/AppData/Local/Microsoft/Windows/Fonts/Helvetica.ttf")
df <- read.csv("../Dat/Ct.csv")
df2 <- df %>% mutate(
Linear = Amp ^ (-Ct)
) %>% pivot_wider(names_from = Target, values_from = c(Ct, Amp, Linear)) %>% mutate(Ratio = Linear_RUBY/Linear_PP2AA3) %>% select(Sample, Ratio)
SEM <- df2 %>% group_by(Sample) %>% summarise(SE = sd(Ratio)/sqrt(n()), Mean = mean(Ratio)) %>% mutate(Group = c("1","1","2","2","3","3","4","4","5"))
SEM$Sample <- factor(SEM$Sample, levels = c("Col-0", "AT1G54080-2", "AT1G54080-3", "AT5G37830-10", "AT5G37830-14",  "AT1G64550-1", "AT1G64550-2", "AT2G29080-3", "AT2G29080-4"))
showtext_auto()
showtext_opts(dip = 600)
ggplot(SEM, aes(x = Sample, y = Mean))+
geom_point(size = 2)+
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE), width = 0.5, size = 1) +
theme_classic() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "none",
text = element_text(family = "Helvetica", size = 12)) +
ylab("Normalized RUBY expression")
#scale_color_manual(values = c("#E69F00", "#009E73", "#56B4E9", "#CC79A7", "#000000"))
ggsave("../Figures/Figure3B.svg", width = 4.875, height = 10.75, units = "cm")
